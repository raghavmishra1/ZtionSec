"""
Django settings for Ztionsec project.

Generated by 'django-admin startproject' using Django 4.2.25.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
import os
SECRET_KEY = os.environ.get('SECRET_KEY', 'ztionsec-prod-key-2024-secure-random-string-for-production-deployment-with-high-entropy-values-12345')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

ALLOWED_HOSTS = [
    'ztionsec-security-platform.onrender.com',
    'localhost',
    '127.0.0.1',
    '.onrender.com',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'django_extensions',  # Commented out - not installed
    # 'csp',  # Content Security Policy - not installed
    'scanner',
]

MIDDLEWARE = [
    'scanner.middleware.HTTPSRedirectMiddleware',  # Custom HTTPS redirect
    'scanner.rate_limiting.RateLimitMiddleware',  # Rate limiting protection
    'scanner.rate_limiting.SecurityMonitoringMiddleware',  # Security monitoring
    'django.middleware.security.SecurityMiddleware',
    'scanner.middleware.SecurityHeadersMiddleware',  # Custom security headers (includes CSP)
    'scanner.middleware.SecurityAuditMiddleware',  # Security auditing
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'scanner.middleware.PathSecurityMiddleware',  # Path-based security and admin protection (MUST be after AuthenticationMiddleware)
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Enhanced Security Settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# HTTPS/SSL Configuration - moved to consolidated security section below

# Content Security Policy (CSP) - Handled by custom middleware
# CSP_DEFAULT_SRC = ("'self'",)
# CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net", "https://pagead2.googlesyndication.com")
# CSP_STYLE_SRC = ("'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net", "https://cdnjs.cloudflare.com")
# CSP_IMG_SRC = ("'self'", "data:", "https:")
# CSP_FONT_SRC = ("'self'", "https://cdnjs.cloudflare.com")
# CSP_CONNECT_SRC = ("'self'",)
# CSP_FRAME_SRC = ("'none'",)
# CSP_OBJECT_SRC = ("'none'",)
# CSP_BASE_URI = ("'self'",)
# CSP_FORM_ACTION = ("'self'",)

# Session Security
SESSION_COOKIE_SECURE = True  # Require HTTPS for session cookies
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Strict'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# CSRF Protection
CSRF_COOKIE_SECURE = True  # Require HTTPS for CSRF cookies
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Strict'

# Additional Security Headers
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'

# Development Override (for local testing)
import os
if DEBUG:
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False

# Prevent Information Disclosure
import re
DISALLOWED_USER_AGENTS = [
    re.compile(r'.*sqlmap.*', re.IGNORECASE),
    re.compile(r'.*nmap.*', re.IGNORECASE),
    re.compile(r'.*nikto.*', re.IGNORECASE),
    re.compile(r'.*dirb.*', re.IGNORECASE),
    re.compile(r'.*dirbuster.*', re.IGNORECASE),
    re.compile(r'.*gobuster.*', re.IGNORECASE),
    re.compile(r'.*wpscan.*', re.IGNORECASE),
    re.compile(r'.*burpsuite.*', re.IGNORECASE),
    re.compile(r'.*owasp-zap.*', re.IGNORECASE),
    re.compile(r'.*acunetix.*', re.IGNORECASE),
    re.compile(r'.*nessus.*', re.IGNORECASE),
]

# Admin Security
ADMIN_URL_PATH = 'secure-admin-panel-ztionsec-2024'  # Custom admin URL
ADMIN_FORCE_ALLAUTH = False

# Error Page Configuration
USE_TZ = True
APPEND_SLASH = True

# Legacy settings - moved to consolidated security section below
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True

# Disable Server Tokens
SILKY_PYTHON_PROFILER = False
SILKY_PYTHON_PROFILER_BINARY = False

# Memory Optimization Settings
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # 2.5MB

# Cache Configuration - Use Memory Cache for Stability
import os

# Always use memory cache to avoid database cache issues
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'ztionsec-cache',
        'TIMEOUT': 300,  # 5 minutes
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    }
}

# Session Configuration - Use database only to avoid cache issues
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_COOKIE_SECURE = True  # Use secure cookies in production
SESSION_COOKIE_HTTPONLY = True

# Security Settings for Production Deployment
SECURE_SSL_REDIRECT = not DEBUG  # Redirect HTTP to HTTPS in production
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_HSTS_SECONDS = 31536000  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'

# CSRF Security
CSRF_COOKIE_SECURE = True  # Use secure CSRF cookies
CSRF_COOKIE_HTTPONLY = True
CSRF_TRUSTED_ORIGINS = [
    'https://ztionsec-security-platform.onrender.com',
    'https://*.onrender.com',
]

# Logging Configuration for Production
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'scanner': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

ROOT_URLCONF = 'Ztionsec.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'scanner.adsense_config.adsense_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'Ztionsec.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Security Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'security': {
            'format': '{levelname} {asctime} {name} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'security.log',
            'formatter': 'security',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'security',
        },
    },
    'loggers': {
        'security': {
            'handlers': ['security_file', 'console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['security_file', 'console'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}

# Create logs directory if it doesn't exist
import os
logs_dir = BASE_DIR / 'logs'
if not os.path.exists(logs_dir):
    os.makedirs(logs_dir)

# Additional Security Configuration
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'ztionsec.local']

# Google AdSense Configuration
ADSENSE_ENABLED = True
ADSENSE_DEBUG = True  # Show ads in development
ADSENSE_SHOW_TO_STAFF = True  # Show ads to admin users
ADSENSE_PUBLISHER_ID = 'pub-9693358517951567'

# Security Headers Configuration
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'

# For production deployment
if not DEBUG:
    ALLOWED_HOSTS = ['your-domain.com', 'www.your-domain.com']
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
